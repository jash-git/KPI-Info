
/**
 * @fileoverview Custom functionality to apply throughout every adsize. This
 * has a dependency on common.js and utils.js
 */
var custom = (function() {

  var dataBackup; 
  var dataPirce;
   var timeArr =[];
   var isAuto = false;
  /**
   * Classes which our JS hooks into. Add more class names as necessary.
   * @enum
   * @private
   */
  var elementClass_ = {
    item: 'js-item',
    itemPrice: 'js-item-price',
    itemRegularPrice: 'js-item-regularprice',
    itemCta: 'js-item-cta',
    imagetextholder: 'js-image-text-holder',
    picholder: 'js-pic-holder',
    basicBg:"js-basic-bg",
    itemName:"js-item-name"
  };

  /**
  * Classes which our JS hooks. 
  * @enum
  * @private
  */
  var elementId_ = {
    arrowPrevious: 'arrow-previous',
    arrowNext: 'arrow-next',
    gpaDataProvider: 'gpa-data-provider'
  };

  var totalCount = 0;

  /**
   * ID
   */
   var ID = {
     arrowPrevious: 'arrow-previous',
     arrowNext: 'arrow-next'
   };

  /**
   * Initialization. Called from handleAdInitialized on each page.
   */
  function init() {
    utils.log('custom.init()');
    var data = common.getAdData();
    if (!data) return;

    // If you're using the swipe gallery to display feed items.
    initItemsUsingGallery_();

    // If you're NOT using the swipe gallery to display feed items.
    //initItemsWithoutGallery_();
  }

  /**
   * Find all items used in the swipe gallery and initialize custom behavior.
   * @private
   */
  function initItemsUsingGallery_() {
    var gallery = common.getGallery();

    // Apply settings to each item in the gallery
    var items = gallery.querySelectorAll('.' + elementClass_.item);
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      initItemDisplay_(item);
    }
  }

  /**
   * Find all items used outside the gallery and initialize custom behavior.
   * @private
   */
  function initItemsWithoutGallery_() {
    // Apply settings to each item
    var items = document.querySelectorAll('.' + elementClass_.item);
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      initItemDisplay_(item);
    }
  }

  /**
   * Set the display settings for each item.
   * Add any custom functionality you need applied on load.
   * @param {Element} item Item element.
   * @private
   */
  function initItemDisplay_(item) {
    // Set mouseout.
    setSalePricesDisplay_(item);

    itemMouseOut(item);

    setBtnStyle(item);
  }
function setBtnStyle(item){
  var itemCta = item.querySelector('.' + elementClass_.itemCta);
  var picholder = item.querySelector('.' + elementClass_.picholder);
  if(dataBackup){
     if(dataBackup["btnStyle"]== "round") itemCta.style.overflow = "hidden";
     else itemCta.style.overflow = "visible";

   }
}


function setSalePricesDisplay_(item) {
    // Get reference to each price element.
    var itemPrice = item.querySelector('.' + elementClass_.itemPrice);
    var itemSalePrice = item.querySelector('.' + elementClass_.itemSalePrice);

    // Sets each item to display correct prices.
    displayCorrectPrices(itemPrice,  itemSalePrice);
  }
  function displayCorrectPrices(defaultPrice, salePrice) {
    var priceValues = {
      defaultPrice: defaultPrice && defaultPrice.textContent || null,
      salePrice: salePrice && salePrice.textContent || null
    };
    utils.log('priceValues: ', priceValues);

    if (isSalePriceEnabled_(priceValues)) {
      showSalePrice(true, defaultPrice, salePrice);
    } else {
      showSalePrice(false, defaultPrice,  salePrice);
    }
  }
  function showSalePrice(state, defaultPrice, salePrice) {
    utils.showElement(salePrice, true);
    
    
    utils.showElement(defaultPrice, state);
  }
  function isSalePriceEnabled_(item) {
    var isEnabled = item.defaultPrice  &&
      !utils.isEmptyString(item.defaultPrice) &&
      utils.stringValuesAreUnique( item.defaultPrice);
    return isEnabled;
  }
  /**
   * Handle Swipegallery Frame Shown event.
   * @param {Event} event Swipegallery frame event.
   */
   function galleryFrameActivated(event) {
    logGalleryFrameAction_(event);
    if (!adData_) return;
    setCurrentItemIndex(getGalleryFrameIndexFirst(event));
  }

  /**
   * Custom Mouseover interaction functionality.
   * @param {index} current index (zero based)
   */
  function updateArrowDisplay (index) {
    var itemsLenght = gallery.querySelectorAll('.' + elementClass_.item).length-1;
    var arrowPrevious = utils.getElement(ID.arrowPrevious);
    var arrowNext = utils.getElement(ID.arrowNext);
    if (index <=0) {
      utils.showElement(arrowPrevious, false);
      utils.showElement(arrowNext, true);
    } else if (index >= itemsLenght) {
      utils.showElement(arrowPrevious, true);
      utils.showElement(arrowNext, false);
    } else {
      utils.showElement(arrowPrevious, true);
      utils.showElement(arrowNext, true);
    }
    utils.log ('itemsLenght: ' + itemsLenght);
  }

  /**
   * Custom Mouseover interaction functionality.
   * @param {Element} item
   */
  function itemMouseOver(item) {
    //var data = common.getAdData();
    var itemCta = item.querySelector('.' + elementClass_.itemCta); 
    var picholder = item.querySelector('.' + elementClass_.picholder);
    var items = gallery.querySelectorAll('.' + elementClass_.item);
    for (var i = 0; i < items.length; i++) {
      var item1 = items[i];
      var itemCta1 = item1.querySelector('.' + elementClass_.itemCta); 
      var picholder1 = item1.querySelector('.' + elementClass_.picholder);

      utils.showElement(itemCta1.children[1], false);
      if(dataBackup){
        picholder1.style.borderColor = "transparent";
      } 
    
    }
    if (item&&itemCta) {
      utils.showElement(itemCta.children[1], true);
      if(dataBackup){
        picholder.style.borderColor = dataBackup["txtColorTitle"].replace("0x","#");
      } 
    }
  }

  /**
   * Custom Mouseout interaction functionality.
   * @param {Element} item
   */
  function itemMouseOut(item) {
    var itemCta = item.querySelector('.' + elementClass_.itemCta);
    var picholder = item.querySelector('.' + elementClass_.picholder);
    if (item&&itemCta) {
      utils.showElement(itemCta.children[1], false);
       if(dataBackup){
        picholder.style.borderColor = "transparent";
      } 
    }
  }

  /**
   * Custom Mouseover on CTA.
   * @param {Element} item
   */
  function itemCtaMouseover(event) {
    // var cta = getItemCtaElement(event.target);
    // if(cta) {
    //   var ctaOn = cta.children[1];
    //   if(ctaOn) utils.showElement(ctaOn, true);
    // }
  }

  /**
   * Custom Mouseout on CTA.
   * @param {Element} item
   */
  function itemCtaMouseout(event) {
    // var cta = getItemCtaElement(event.target);
    // if(cta) {
    //   var ctaOn = cta.children[1];
    //   if(ctaOn) utils.showElement(ctaOn, false);
    // }
  }

  /**
   * Find the item CTA element by traversing the item element.
   * @param {Element} el Element to check.
   * @return {Element}
   */
  function getItemCtaElement(el) {
    var cta = utils.closestElement(el, function(el) {
      return el.classList.contains(elementClass_.itemCta);
    });
    return cta;
  }

  /*
  * Custom transform dynamic data for data validation.
  */
  function transformDynamicData () {
    var dataProvider = document.querySelector('#' + elementId_.gpaDataProvider);
    dataProvider.addDataTransformer(function(dynamicData) {
        var itemAttributes = ['name', 'subTitle', 'description'];
        var headlineAttributes = ['txt', 'cta', 'disclaimer'];

        if(dynamicData.Product){
          totalCount = dynamicData.Product.length;
          for (var i = 0, l = dynamicData.Product.length; i < l; i++) {
            convertFullspaceToHalfspace(dynamicData.Product[i], itemAttributes);
            priceFormat(dynamicData.Product[i]);
            if(!(utils.isEmptyString(dynamicData.Product[i]["salePrice"]) || dynamicData.Product[i]["salePrice"]== undefined)){
              
              if(dynamicData.Product[i]["price"] != dynamicData.Product[i]["salePrice"] && dynamicData.Product[i]["price"] != undefined) dynamicData.Product[i]["price"] = "<small style='white-space: nowrap;color: #444444;text-decoration:line-through'><small>" + dynamicData.Product[i]["price"]  + "</small></small>" + " "+"<span style='white-space: nowrap;'>" + dynamicData.Product[i]["salePrice"] + "</span>";
            }
            if(dynamicData.Product[i]["price"]=="" || dynamicData.Product[i]["price"]==undefined) dynamicData.Product[i]["price"] = dynamicData.Product[i]["salePrice"]
          }
        }
        convertFullspaceToHalfspace(dynamicData.Headline, headlineAttributes);  
        
        dataBackup = dynamicData.Design;
         
         
    });
  }

  function convertLongNameToShortName (item, attr, charaLength) {
   
        item[attr] = convertLongText(item[attr], charaLength);

      
    }

  

  function getDataCount() {
    
    return totalCount;
  }
function priceFormat (product) {
    if(!product.price) return;
    product.price = replaceChineseYenSign(product.price);
    product.price = removeCents(product.price);
  }

  /**
   * Replace double byte Chinese Yen sign (￥) to single byte Yen sign (¥).
   * @param {string} price Price attribute pottencially contains Yen sign.
   */
  function replaceChineseYenSign (price) {
    if(!price) return;

    if(price.indexOf("￥") != -1) {
      // Replacing Full Width Yen Sign (\uffe5) with Half Width Yen Sign (\u00a5).
      price = price.replace("\uffe5", "\u00a5");
    }

    return price;
  };

  /**
   * Remove cents where cents = '00'
   * @return {string} with cents removed
   */
  function removeCents (price) {
    if(! price) return;
    var matcher = /(\.|\,)0{2}(?![\d])/;
    return price.replace(matcher, '');
  };

  /**
   * Convert fullspace to ASCII halfspace.
   * @param {Object} item Item whose attributes are checked.
   * @param {Array} attrs Item attributes to check.
   */
  function convertFullspaceToHalfspace (item, attrs) {
    for (var i = 0; i < attrs.length; i++) {
      var attr = attrs[i];
      if(item && item[attr]) {
        item[attr] = convert(item[attr]);
      }
    }

    function convert (text) {
      if(text && text.indexOf("　") != -1) {
        text = text.replace(/　/g," ");
      }
      return text;
    }
  };

  function galleryFrameShown(event) {
    var gallery = common.getGallery();
    var itemsLength = gallery.frameCount;
    var indexFirst = common.getGalleryFrameIndexFirst(event);
    var indexLast = common.getGalleryFrameIndexLast(event);
    var arrowPrevious = utils.getElement(elementId_.arrowPrevious);
    var arrowNext = utils.getElement(elementId_.arrowNext);

    var index = common.getCurrentItemIndex();
    updateArrowDisplay (index);

    if (itemsLength < 2) {
      utils.showElement(arrowPrevious, false);
      utils.showElement(arrowNext, false);
      return;
    }
    if (indexFirst > 0) {
      arrowPrevious.style.visibility = 'visible';
    } else {
      arrowPrevious.style.visibility = 'hidden';
    }
    if (indexLast < itemsLength - 1) {
      arrowNext.style.visibility = 'visible';

    } else {
      arrowNext.style.visibility = 'hidden';
    }
  }
  return {
    init: init,
    itemMouseOver: itemMouseOver,
    itemMouseOut: itemMouseOut,
    itemCtaMouseover: itemCtaMouseover,
    itemCtaMouseout: itemCtaMouseout,
    galleryFrameShown: galleryFrameShown,
    getDataCount: getDataCount,
    galleryFrameActivated: galleryFrameActivated,
    transformDynamicData: transformDynamicData
  };

})();
